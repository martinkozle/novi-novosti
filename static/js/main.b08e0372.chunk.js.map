{"version":3,"sources":["BackButton.tsx","Header.tsx","API.tsx","CategoriesNavbar.tsx","Comments.tsx","Article.tsx","ArticlePreviews.tsx","App.tsx","index.tsx"],"names":["BackButton","history","useHistory","Button","className","type","variant","onClick","goBack","style","left","Search","Form","Group","Control","placeholder","Header","Navbar","bg","expand","Container","Brand","to","Toggle","Collapse","id","Nav","Link","requestArticlePreviewByID","articleID","article","requestArticleByID","text","categories","articles","find","requestSavedArticles","savedArticlesString","localStorage","getItem","JSON","parse","requestCommentsByArticleID","commentsString","CategoryButton","props","category","buttonClass","CategoriesNavbar","categoryName","useParams","useState","shownCategories","setCategories","useEffect","map","Comment","appear","animate","in","timeout","author","time","CommentBox","textAreaRef","useRef","clickButton","e","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","current","value","comment","now","comments","newComments","setItem","stringify","saveComment","updateCommentsFunc","as","ref","height","Comments","setComments","commentedAnimation","setCommentedAnimation","updateComments","updatedComments","index","key","BUTTON_STATUS_NOT_SAVED","saved","innerText","BUTTON_STATUS_SAVED","ArticleParagraph","prop","Article","buttonStatus","setButtonStatus","toggleSaveArticle","confirmAlert","title","message","buttons","label","newSavedArticles","filter","item","unsaveArticle","savedArticles","saveArticle","isSaved","includes","Card","Body","Title","Item","element","split","paragraph","CategoryArticlePreviews","shownArticles","setArticles","ArticlePreviews","SavedArticlePreviews","articlePreviews","undefined","articlePreviewElements","length","ArticlePreview","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b08e0372.chunk.js","sourcesContent":["import React from 'react';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-icons/font/bootstrap-icons.css';\r\n\r\n\r\nfunction BackButton() {\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <Button className='mb-2 position-absolute' type='button' variant='white' onClick={history.goBack} style={{left: 20}}>\r\n            <i className=\"bi bi-arrow-left fs-3 text-white\"></i>\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default BackButton;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport BackButton from './BackButton';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-icons/font/bootstrap-icons.css';\r\nimport './Header.css';\r\n\r\n\r\nfunction Header() {\r\n    return (\r\n        <Navbar bg='dark' expand='lg' className='sticky-top'>\r\n            <BackButton/>\r\n            <Container className='ms-auto'>\r\n                <Navbar.Brand className='btn-group'>\r\n                    <Link to='/' className='bg-secondary rounded-2 btn btn-secondary text-start'>\r\n                        <h1 className='header'>Нови Новости</h1>\r\n                    </Link>\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle aria-controls='basic-navbar-nav'/>\r\n                <Navbar.Collapse id='basic-navbar-nav'>\r\n                    <Nav className='me-auto'></Nav>\r\n                    <Nav className='me-auto'>\r\n                        <Search/>\r\n                    </Nav>\r\n                    <Nav>\r\n                        <Link to='/saved-articles' className='me-2'>\r\n                            <Button variant='secondary'>Прегледај зачувани објави</Button>\r\n                        </Link>\r\n                        <Nav.Link className='text-white'>\r\n                            <i className=\"bi bi-person-circle\"></i> <span\r\n                            className='text-decoration-underline'>Мартин</span>\r\n                        </Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nfunction Search() {\r\n    return (\r\n        <Form.Group className='d-flex flex-row'>\r\n            <Form.Control type='search' placeholder='Пребарај...' className='rounded-left'/>\r\n            <Button type='submit' variant='secondary' className='rounded-right'>\r\n                <i className=\"bi bi-search\"></i>\r\n            </Button>\r\n        </Form.Group>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","// this file contains mock requests to local json files and browser local storage\r\nimport articles from './data/articles.json';\r\nimport categories from './data/categories.json';\r\n\r\n\r\nexport function requestCategories() {\r\n    return categories.categories;\r\n}\r\n\r\nexport function requestArticlePreviewByID(articleID: number) {\r\n    // return mock article preview\r\n    const article = requestArticleByID(articleID);\r\n    if (article) {\r\n        const {text, categories, ...articlePreview} = article;\r\n        return articlePreview;\r\n    }\r\n    return article;\r\n}\r\n\r\nexport function requestArticleByID(articleID: number) {\r\n    // return mock article\r\n    return articles.articles.find(article => article.id === articleID);\r\n}\r\n\r\nexport function requestArticlePreviewsByCategory(category: string) {\r\n    // return mock article previews array\r\n    return articles.articles.filter(article => article.categories.includes(category)).map(article => {\r\n        const {text, categories, ...articlePreview} = article; // front-end will not get text and categories elements from API\r\n        return articlePreview;\r\n    });\r\n}\r\n\r\nexport function requestSavedArticles(): number[] {\r\n    // return saved articles from local storage\r\n    const savedArticlesString = localStorage.getItem('savedArticles');\r\n    if (savedArticlesString) {\r\n        return JSON.parse(savedArticlesString)['articles'];\r\n    }\r\n    return [];\r\n}\r\n\r\nexport function saveArticle(articleID: number) {\r\n    // save article to local storage\r\n    const savedArticles = requestSavedArticles();\r\n    const newSavedArticles = [...savedArticles, articleID];\r\n    localStorage.setItem('savedArticles', JSON.stringify({articles: newSavedArticles}));\r\n}\r\n\r\nexport function unsaveArticle(articleID: number) {\r\n    // remove article from local storage\r\n    const savedArticles = requestSavedArticles();\r\n    const newSavedArticles = savedArticles.filter(item => item !== articleID);\r\n    localStorage.setItem('savedArticles', JSON.stringify({articles: newSavedArticles}));\r\n}\r\n\r\nexport function isArticleSaved(articleID: number) {\r\n    // check if article is saved in local storage\r\n    return requestSavedArticles().includes(articleID);\r\n}\r\n\r\nexport function requestCommentsByArticleID(articleID: number) {\r\n    // request comments from an article from local storage\r\n    const commentsString = localStorage.getItem(`comments-${articleID}`);\r\n    if (commentsString) {\r\n        return JSON.parse(commentsString)['comments'];\r\n    }\r\n    return [];\r\n}\r\n\r\nexport function saveComment(articleID: number, comment: Object) {\r\n    // save comment to local storage\r\n    const comments = requestCommentsByArticleID(articleID);\r\n    const newComments = [comment, ...comments];\r\n    localStorage.setItem(`comments-${articleID}`, JSON.stringify({comments: newComments}));\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport {Link, useParams} from 'react-router-dom';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport {requestCategories} from './API';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-icons/font/bootstrap-icons.css';\r\n\r\ninterface CategoriesNavbarParams {\r\n    categoryName: string | undefined\r\n}\r\n\r\ninterface CategoryButtonProp {\r\n    category: string,\r\n    buttonClass: string\r\n}\r\n\r\nfunction CategoriesNavbar() {\r\n    const {categoryName} = useParams<CategoriesNavbarParams>();\r\n    const [shownCategories, setCategories] = useState<string[]>([]);\r\n\r\n    useEffect(() => {\r\n        const categories = requestCategories();\r\n        setCategories(categories);\r\n    }, []);\r\n\r\n    return (\r\n        <Navbar bg='light' expand='lg' className='mb-2'>\r\n            <Container>\r\n                <Nav className='me-auto'>\r\n                    {\r\n                        shownCategories.map(\r\n                            category => {\r\n                                if (category === categoryName) {\r\n                                    return (\r\n                                        <CategoryButton key={category} category={category} buttonClass='bg-success'/>\r\n                                    )\r\n                                } else {\r\n                                    return (\r\n                                        <CategoryButton key={category} category={category} buttonClass='bg-primary'/>\r\n                                    )\r\n                                }\r\n                            }\r\n                        )\r\n                    }\r\n                </Nav>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nfunction CategoryButton(props: CategoryButtonProp) {\r\n    return (\r\n        <Link to={`/category/${props.category}`}\r\n              className={`text-decoration-none nav-link rounded me-2 ${props.buttonClass} text-white text-center`}>\r\n            {props.category}\r\n        </Link>\r\n    );\r\n}\r\n\r\nexport default CategoriesNavbar;\r\n","import React, {useState, useEffect, useRef} from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Collapse from 'react-bootstrap/Collapse';\r\nimport {requestCommentsByArticleID, saveComment} from './API';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-icons/font/bootstrap-icons.css';\r\n\r\ninterface CommentsProp {\r\n    articleID: number\r\n}\r\n\r\ninterface CommentInterface {\r\n    id: number,\r\n    text: string,\r\n    time: string,\r\n    author: string\r\n}\r\n\r\ninterface CommentProp {\r\n    id: number,\r\n    text: string,\r\n    time: string,\r\n    author: string,\r\n    animate?: boolean\r\n}\r\n\r\ninterface CommentBoxProp {\r\n    articleID: number,\r\n    updateCommentsFunc: () => void\r\n}\r\n\r\nfunction Comments(props: CommentsProp) {\r\n    const [comments, setComments] = useState<CommentProp[]>([]);\r\n    const [commentedAnimation, setCommentedAnimation] = useState<boolean>(false);\r\n\r\n    function updateComments(articleID: number, animate: boolean) {\r\n        const updatedComments = requestCommentsByArticleID(articleID);\r\n        setComments(updatedComments);\r\n        setCommentedAnimation(animate);\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateComments(props.articleID, false);\r\n    }, [props.articleID]);\r\n\r\n    return (\r\n        <div className='mt-2 border'>\r\n            <CommentBox articleID={props.articleID} updateCommentsFunc={() => updateComments(props.articleID, true)}/>\r\n            <div>\r\n                {\r\n                    comments.map((comment, index) => {\r\n                        return <Comment {...comment} key={comment.id} animate={index === 0 && commentedAnimation}/>\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Comment(props: CommentProp) {\r\n    return (\r\n        <Collapse appear={props.animate} in={true} timeout={500}>\r\n            <div className='border border-rounded bg-light mx-2 my-4 p-2'>\r\n                <div>\r\n                    <i className=\"bi bi-person-circle fs-2 \"></i>\r\n                    <span className='fs-5'> {props.author}</span>\r\n                </div>\r\n\r\n                <p>\r\n                    {props.text}\r\n                </p>\r\n                <small className='text-muted me-auto'>Објавено на {props.time}</small>\r\n            </div>\r\n        </Collapse>\r\n    );\r\n}\r\n\r\nfunction CommentBox(props: CommentBoxProp) {\r\n    const textAreaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    function clickButton(e: React.MouseEvent) {\r\n        const today = new Date();\r\n        const dd = today.getDate();\r\n        const mm = today.getMonth() + 1;\r\n        const yyyy = today.getFullYear();\r\n        if (textAreaRef.current && textAreaRef.current.value !== '') {\r\n            const comment: CommentInterface = {\r\n                id: Date.now(),\r\n                text: textAreaRef.current.value,\r\n                time: `${dd}.${mm}.${yyyy}`,\r\n                author: 'Мартин'\r\n            }\r\n            textAreaRef.current.value = '';\r\n            saveComment(props.articleID, comment);\r\n            props.updateCommentsFunc();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='m-2'>\r\n            <Form.Group className='d-flex flex-row'>\r\n                <Form.Control as='textarea' placeholder='Напиши коментар...' className='me-2' ref={textAreaRef}>\r\n                </Form.Control>\r\n                <Button type='submit' style={{height: 75}} onClick={(e) => clickButton(e)}>\r\n                    <i className=\"bi bi-arrow-return-left fs-1\"></i>\r\n                </Button>\r\n            </Form.Group>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comments;\r\n","import React, {useState, useEffect} from 'react';\r\nimport {useParams} from \"react-router-dom\";\r\nimport {confirmAlert} from 'react-confirm-alert';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Comments from './Comments';\r\nimport BackButton from './BackButton';\r\nimport {requestArticleByID, saveArticle, unsaveArticle, isArticleSaved} from './API';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-icons/font/bootstrap-icons.css';\r\n\r\ninterface ArticleParams {\r\n    id: string\r\n}\r\n\r\ninterface ButtonStatus {\r\n    saved: boolean,\r\n    variant: string,\r\n    innerText: string\r\n}\r\n\r\nconst BUTTON_STATUS_NOT_SAVED: ButtonStatus = {\r\n    saved: false,\r\n    variant: 'success',\r\n    innerText: 'Зачувај'\r\n}\r\n\r\nconst BUTTON_STATUS_SAVED: ButtonStatus = {\r\n    saved: true,\r\n    variant: 'secondary',\r\n    innerText: 'Зачувано'\r\n}\r\n\r\nfunction Article() {\r\n    const [buttonStatus, setButtonStatus] = useState<ButtonStatus>(BUTTON_STATUS_NOT_SAVED);\r\n\r\n    const {id} = useParams<ArticleParams>();\r\n    const article = requestArticleByID(+id);\r\n\r\n    useEffect(() => {\r\n        let isSaved = false;\r\n        if (article) {\r\n            isSaved = isArticleSaved(article.id);\r\n        }\r\n        if (isSaved) {\r\n            setButtonStatus(BUTTON_STATUS_SAVED);\r\n        } else {\r\n            setButtonStatus(BUTTON_STATUS_NOT_SAVED);\r\n        }\r\n    }, [article]);\r\n\r\n\r\n    function toggleSaveArticle(id: number) {\r\n        if (buttonStatus.saved) {\r\n            confirmAlert({\r\n                title: 'Тргни од зачувани',\r\n                message: 'Дали сте сигурни?',\r\n                buttons: [\r\n                    {\r\n                        label: 'Да',\r\n                        onClick: () => {\r\n                            unsaveArticle(id);\r\n                            setButtonStatus(BUTTON_STATUS_NOT_SAVED);\r\n                        }\r\n                    },\r\n                    {\r\n                        label: 'Не',\r\n                        onClick: () => void 0\r\n                    }\r\n                ]\r\n            });\r\n        } else {\r\n            saveArticle(id);\r\n            setButtonStatus(BUTTON_STATUS_SAVED);\r\n        }\r\n    }\r\n\r\n    if (article) {\r\n        return (\r\n            <Container className='mt-2'>\r\n                <BackButton/>\r\n                <Card key={article.id}>\r\n                    <Card.Body>\r\n                        <Card.Title className='fs-2'>{article.title}</Card.Title>\r\n                        <Navbar>\r\n                            <Nav className='me-auto'>\r\n                                {\r\n                                    article.categories.map(category => {\r\n                                        return (\r\n                                            <Nav.Item key={category} className='me-2 p-1 bg-info'>{category}</Nav.Item>\r\n                                        );\r\n                                    })\r\n                                }\r\n                            </Nav>\r\n                            <Nav>\r\n                                <Button variant={buttonStatus.variant}\r\n                                        onClick={element => toggleSaveArticle(article.id)}>{buttonStatus.innerText}</Button>\r\n                            </Nav>\r\n                        </Navbar>\r\n                        <small className='text-muted'>Објавено на {article.time}</small>\r\n                        <hr/>\r\n                        {\r\n                            article.text.split('\\n').map(\r\n                                (paragraph, index) => {\r\n                                    return <ArticleParagraph key={index} text={paragraph}/>\r\n                                }\r\n                            )\r\n                        }\r\n                    </Card.Body>\r\n                </Card>\r\n                <Comments articleID={article.id}/>\r\n            </Container>\r\n        );\r\n    } else {\r\n        return <Container className='mt-2'><h1>Article not found!</h1></Container>\r\n    }\r\n}\r\n\r\ninterface ArticleParagraphProp {\r\n    text: string\r\n}\r\n\r\nfunction ArticleParagraph(prop: ArticleParagraphProp) {\r\n    if (prop.text === '') {\r\n        return <></>\r\n    } else {\r\n        return (\r\n            <p>{prop.text}</p>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Article;\r\n","import React, {useState, useEffect} from 'react';\r\nimport {Link, useParams} from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Container from 'react-bootstrap/Container';\r\nimport {requestArticlePreviewByID, requestArticlePreviewsByCategory, requestSavedArticles} from './API';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-icons/font/bootstrap-icons.css';\r\n\r\n\r\ninterface ArticlePreviewsProp {\r\n    title?: string,\r\n    shownArticles: ArticlePreviewProp[]\r\n}\r\n\r\ninterface ArticlePreviewProp {\r\n    id: number,\r\n    title: string,\r\n    time: string\r\n}\r\n\r\ninterface CategoryArticlePreviewsParams {\r\n    categoryName: string\r\n}\r\n\r\nfunction CategoryArticlePreviews() {\r\n    const [shownArticles, setArticles] = useState<ArticlePreviewProp[]>([]);\r\n    const {categoryName} = useParams<CategoryArticlePreviewsParams>();\r\n\r\n    useEffect(() => {\r\n        const articles = requestArticlePreviewsByCategory(categoryName);\r\n        setArticles(articles);\r\n\r\n    }, [categoryName]);\r\n\r\n    return <ArticlePreviews title={categoryName} shownArticles={shownArticles}/>\r\n}\r\n\r\nfunction SavedArticlePreviews() {\r\n    const articleIDs = requestSavedArticles();\r\n    const articlePreviews: ArticlePreviewProp[] = articleIDs.map(requestArticlePreviewByID).filter(article => article !== undefined) as ArticlePreviewProp[];\r\n    return (\r\n        <ArticlePreviews title='Зачувани објави' shownArticles={articlePreviews}/>\r\n    );\r\n}\r\n\r\nfunction ArticlePreviews(props: ArticlePreviewsProp) {\r\n    const [shownArticles, setArticles] = useState<ArticlePreviewProp[]>([]);\r\n\r\n    useEffect(() => {\r\n        setArticles(props.shownArticles);\r\n    }, [props.shownArticles]);\r\n\r\n    let articlePreviewElements;\r\n    if (shownArticles.length > 0) {\r\n        articlePreviewElements = shownArticles.map(\r\n            article => {\r\n                return (\r\n                    <ArticlePreview key={article.id} id={article.id} title={article.title}\r\n                                    time={article.time}/>\r\n                );\r\n            }\r\n        )\r\n    } else {\r\n        articlePreviewElements = <h2 className='mx-2 my-4'>Празно!</h2>\r\n    }\r\n\r\n    return (\r\n        <Container className='mt-2'>\r\n            <h2>\r\n                <i className=\"bi bi-square-fill fs-5 text-success me-2\"></i>\r\n                {props.title}\r\n            </h2>\r\n            <div className='border border-rounded mt-3'>\r\n                {articlePreviewElements}\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\n\r\nfunction ArticlePreview(props: ArticlePreviewProp) {\r\n    return (\r\n        <div className='border border-rounded bg-light mx-2 my-4 p-2'>\r\n            <Link to={`/article/${props.id}`} className='text-decoration-none text-black'>\r\n                <h2 className='header'>\r\n                    {props.title}\r\n                </h2>\r\n            </Link>\r\n            <Nav>\r\n                <small className='text-muted me-auto'>Објавено на {props.time}</small>\r\n                <Link to={`/article/${props.id}`}>\r\n                    <Button>Прочитај повеќе...</Button>\r\n                </Link>\r\n            </Nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {ArticlePreviews, CategoryArticlePreviews, SavedArticlePreviews};\r\n","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch, Redirect} from \"react-router-dom\";\nimport Header from './Header';\nimport CategoriesNavbar from './CategoriesNavbar';\nimport Article from './Article';\nimport {CategoryArticlePreviews, SavedArticlePreviews} from './ArticlePreviews';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n    return (\n        <div>\n            <Router>\n                <Header/>\n                <Switch>\n                    <Route exact path='/'>\n                        <Redirect to='/category/Ново'/>\n                    </Route>\n                    <Route exact path='/category/:categoryName'>\n                        <CategoriesNavbar/>\n                        <CategoryArticlePreviews/>\n                    </Route>\n                    <Route exact path='/article/:id'>\n                        <CategoriesNavbar/>\n                        <Article/>\n                    </Route>\n                    <Route exact path='/saved-articles'>\n                        <SavedArticlePreviews/>\n                    </Route>\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}